#
# Tets of cost-based choice between the materialization and in-to-exists
# subquery execution strategies (MWL#89)
#

--disable_warnings
drop table if exists t1, t2, t3, t1i, t2i, t3i;
--enable_warnings

create table t1 (a1 char(8), a2 char(8));
create table t2 (b1 char(8), b2 char(8));
create table t3 (c1 char(8), c2 char(8));

--echo Unindexed tables
insert into t1 values ('1 - 00', '2 - 00');
insert into t1 values ('1 - 01', '2 - 01');
insert into t1 values ('1 - 02', '2 - 02');

insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 01', '2 - 01');     
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 03', '2 - 03');

insert into t3 values ('1 - 01', '2 - 01');
insert into t3 values ('1 - 02', '2 - 02');
insert into t3 values ('1 - 03', '2 - 03');
insert into t3 values ('1 - 04', '2 - 04');

--echo Indexed tables
create table t1i (a1 char(8), a2 char(8));
create table t2i (b1 char(8), b2 char(8));
create table t3i (c1 char(8), c2 char(8));
create index it1i1 on t1i (a1);
create index it1i2 on t1i (a2);
create index it1i3 on t1i (a1, a2);

create index it2i1 on t2i (b1);
create index it2i2 on t2i (b2);
create index it2i3 on t2i (b1, b2);

create index it3i1 on t3i (c1);
create index it3i2 on t3i (c2);
create index it3i3 on t3i (c1, c2);

insert into t1i select * from t1;
insert into t2i select * from t2;
insert into t3i select * from t3;

--echo 
--echo 1. Both materialization and in-to-exists are possible to execute
--echo 
set @@optimizer_switch='materialization=on,in_to_exists=on';

--echo 
--echo 1.1 In-to-exists is cheaper

set @@optimizer_switch='semijoin=off';
explain extended
select * from t1 where a1 in (select b1 from t2 where b1 > '0');
select * from t1 where a1 in (select b1 from t2 where b1 > '0');
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0');
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0');

set @@optimizer_switch='semijoin=on';
explain extended
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2);
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2);
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2 having b2 <  '2 - 04');
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2 having b2 <  '2 - 04');

--echo 
--echo 1.2 Materialization is cheaper

--echo 1.2.1 Materialization is executable

insert into t1 values ('1 - 03', '2 - 03');
insert into t1 values ('1 - 04', '2 - 04');
insert into t1 values ('1 - 05', '2 - 05');

set @@optimizer_switch='semijoin=off';
explain extended
select * from t1 where a1 in (select b1 from t2 where b1 > '0');
select * from t1 where a1 in (select b1 from t2 where b1 > '0');
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0');
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0');

set @@optimizer_switch='semijoin=on';
explain extended
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2);
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2);
explain extended
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2 having b2 <  '2 - 04');
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2 having b2 <  '2 - 04');

delete from t1 where a1 >= '1 - 03';

--echo 1.2.2 Materialization is NOT executable, revert to in-to-exists

--echo 
--echo 2. Materialization is OFF, in-to-exists is ON
--echo 
set @@optimizer_switch='materialization=off,in_to_exists=on';

--echo 
--echo 3. Materialization is ON, in-to-exists is OFF
--echo 
set @@optimizer_switch='materialization=on,in_to_exists=off';

--echo 3.1 Materialization is executable
--echo 3.2 Materialization is NOT executable, revert to in-to-exists

--echo 
--echo 4. Edge cases
--echo 
--echo 4.0 Both materialization and in_to_exists cannot be off
set @@optimizer_switch='materialization=off,in_to_exists=off';
--error ER_ILLEGAL_SUBQUERY_OPTIMIZER_SWITCHES
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);

--echo 4.1 Outer query with no tables
--echo 4.2 Subquery with no tables
--echo 4.3 optimize_cond detects FALSE where/having clause
--echo 4.4 opt_sum_query detects no matching min/max row or substitutes MIN/MAX with a const
--echo 4.4 make_join_select detects impossible WHERE
--echo 4.5 constant optimization detects "no matching row in const table"

--echo 5. UPDATE/DELETE with subqueries

drop table t1, t2, t3, t1i, t2i, t3i;

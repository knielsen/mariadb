--source include/have_stat_tables.inc
--source include/have_debug_sync.inc

set @save_use_stat_tables=@@use_stat_tables;

set use_stat_tables='preferably';

--disable_warnings
DROP DATABASE IF EXISTS dbt3_s001;
--enable_warnings

CREATE DATABASE dbt3_s001;

use dbt3_s001;

set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='extended_keys=off';
 
--disable_query_log
--disable_result_log
--disable_warnings
--source include/dbt3_s001.inc
create index i_p_retailprice on part(p_retailprice);
delete from mysql.table_stat;
delete from mysql.column_stat;
delete from mysql.index_stat;
ANALYZE TABLE
customer, lineitem, nation, orders, part, partsupp, region, supplier;
FLUSH TABLE mysql.table_stat, mysql.index_stat;
--enable_warnings
--enable_result_log
--enable_query_log

select * from mysql.table_stat;
select * from mysql.index_stat;

set optimizer_switch=@save_optimizer_switch; 

set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='index_condition_pushdown=off';

let $Q5=
select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue
from customer, orders, lineitem, supplier, nation, region
where c_custkey = o_custkey and l_orderkey = o_orderkey
      and l_suppkey = s_suppkey and c_nationkey = s_nationkey
      and s_nationkey = n_nationkey and n_regionkey = r_regionkey
      and r_name = 'AMERICA' and o_orderdate >= date '1995-01-01'
      and o_orderdate < date '1995-01-01' + interval '1' year
group by n_name
order by revenue desc;

eval EXPLAIN $Q5;
eval $Q5;

set optimizer_switch=@save_optimizer_switch;

delete from mysql.index_stat;

--disable_query_log
--disable_result_log
--disable_warnings
ANALYZE TABLE
customer, lineitem, nation, orders, part, partsupp, region, supplier;
FLUSH TABLE mysql.table_stat, mysql.index_stat;
--enable_warnings
--enable_result_log
--enable_query_log

select * from mysql.table_stat;
select * from mysql.index_stat;

select * from mysql.table_stat where table_name='orders';
select * from mysql.index_stat where table_name='orders';
select (select cardinality from mysql.table_stat where table_name='orders') /
       (select avg_frequency from mysql.index_stat 
          where index_name='i_o_orderdate' and prefix_arity=1) as n_distinct; 
select count(distinct o_orderdate) from orders;
select (select cardinality from mysql.table_stat where table_name='orders') /
       (select avg_frequency from mysql.index_stat 
          where index_name='i_o_custkey' and prefix_arity=1) as n_distinct;
select count(distinct o_custkey) from orders; 
show index from orders;
select index_name, column_name, cardinality from information_schema.statistics
  where table_name='orders';

set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='index_condition_pushdown=off';

eval EXPLAIN $Q5;
eval $Q5;

set optimizer_switch=@save_optimizer_switch;

let $Q8=
select o_year,
       sum(case when nation = 'UNITED STATES' then volume else 0 end) /
       sum(volume) as mkt_share
from (select extract(year from o_orderdate) as o_year,
             l_extendedprice * (1-l_discount) as volume, 
             n2.n_name as nation
      from part, supplier, lineitem, orders, customer, 
           nation n1, nation n2, region
      where p_partkey = l_partkey and s_suppkey = l_suppkey
            and l_orderkey = o_orderkey and o_custkey = c_custkey
            and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey
            and r_name = 'AMERICA' and s_nationkey = n2.n_nationkey
            and o_orderdate between date '1995-01-01' and date '1996-12-31'
            and p_type = 'STANDARD BRUSHED STEEL' ) as all_nations
group by o_year
order by o_year;

eval EXPLAIN $Q8;
eval $Q8;


let $Q9=
select nation, o_year, sum(amount) as sum_profit
from (select n_name as nation, 
      extract(year from o_orderdate) as o_year,
      l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
      from part, supplier, lineitem, partsupp, orders, nation
      where s_suppkey = l_suppkey and ps_suppkey = l_suppkey
            and ps_partkey = l_partkey and p_partkey = l_partkey
            and o_orderkey = l_orderkey and s_nationkey = n_nationkey
            and p_name like '%green%') as profit
group by nation, o_year
order by nation, o_year desc;

eval EXPLAIN $Q9;
eval $Q9;


set @save_optimizer_switch=@@optimizer_switch;
set optimizer_switch='extended_keys=on';

let $QQ1=
select o_orderkey, p_partkey
  from part, lineitem, orders
  where p_retailprice > 1100 and o_orderdate='1997-01-01' 
        and o_orderkey=l_orderkey and p_partkey=l_partkey;

eval EXPLAIN $QQ1;
eval $QQ1;

set optimizer_switch=@save_optimizer_switch;

#
# Test for parallel memory allocation for statistical data
# 
#    assumes that start the code of memory allocation for stats data has this line:
#
#       DEBUG_SYNC(thd, "statistics_mem_alloc_start1");
#       DEBUG_SYNC(thd, "statistics_mem_alloc-start2");
#

let $Q6=
select sum(l_extendedprice*l_discount) as revenue
from lineitem
where l_shipdate >= date '1994-01-01' 
      and l_shipdate < date '1994-01-01' + interval '1' year
      and l_discount between 0.06 - 0.01 and 0.06 + 0.01
      and l_quantity < 24;

flush table lineitem;
set use_stat_tables='never';
eval $Q6;

connect (con1, localhost, root,,);
connect (con2, localhost, root,,);

connection con1;
set debug_sync='statistics_mem_alloc_start1  WAIT_FOR second_thread_started_too';
set debug_sync='statistics_mem_alloc_start2  SIGNAL first_thread_working';
use dbt3_s001;
set use_stat_tables='preferably';
--send_eval $Q6                                            

connection con2;
set debug_sync='statistics_mem_alloc_start1  SIGNAL second_thread_started_too';
set debug_sync='statistics_mem_alloc_start2  WAIT_FOR first_thread_working';
use dbt3_s001;
set use_stat_tables='preferably';
--send_eval $Q6

connection con1;
--reap

connection con2;
--reap

connection default;
set use_stat_tables='preferably';
disconnect con1;
disconnect con2;
set debug_sync='RESET';

#
# Test for parallel statistics collection
# 
#    assumes that start of stats collection code has this line:
#
#       DEBUG_SYNC(thd, "statistics_collection_start1");
#       DEBUG_SYNC(thd, "statistics_collection_start2");
#

select * from mysql.index_stat where table_name='lineitem' order by index_name;
delete from mysql.index_stat 
  where table_name='lineitem' and
        index_name in ('i_l_shipdate', 'i_l_receiptdate');
select * from mysql.index_stat where table_name='lineitem' order by index_name;
--disable_result_log
--disable_warnings
analyze table lineitem persistent for columns() indexes (i_l_shipdate);
--enable_warnings
--enable_result_log
select * from mysql.index_stat where table_name='lineitem' order by index_name;
delete from mysql.index_stat 
  where table_name='lineitem' and index_name= 'i_l_shipdate';
select * from mysql.index_stat where table_name='lineitem' order by index_name;

connect (con1, localhost, root,,);
connect (con2, localhost, root,,);

connection con1;
set debug_sync='statistics_collection_start1  WAIT_FOR second_thread_started_too';
set debug_sync='statistics_collection_start2  SIGNAL first_thread_working';
use dbt3_s001;
set use_stat_tables='preferably';
--send analyze table lineitem persistent for columns() indexes (i_l_shipdate)

connection con2;
set debug_sync='statistics_collection_start1  SIGNAL second_thread_started_too';
set debug_sync='statistics_collection_start2  WAIT_FOR first_thread_working';
use dbt3_s001;
set use_stat_tables='preferably';
--send analyze table lineitem persistent for columns() indexes (i_l_receiptdate)

connection con1;
--disable_result_log
--disable_warnings
--reap
--enable_warnings
--enable_result_log

connection con2;
--disable_result_log
--disable_warnings
--reap
--enable_warnings
--enable_result_log

connection default;
disconnect con1;
disconnect con2;
set debug_sync='RESET';

select * from mysql.index_stat where table_name='lineitem' order by index_name;

DROP DATABASE dbt3_s001;

use test;

set use_stat_tables=@save_use_stat_tables;

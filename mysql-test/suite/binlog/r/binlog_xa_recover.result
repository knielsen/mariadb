SET GLOBAL max_binlog_size= 4096;
CREATE TABLE t1 (a INT PRIMARY KEY, b MEDIUMTEXT) ENGINE=Innodb;
CREATE TABLE t2 (a INT PRIMARY KEY, b MEDIUMTEXT) ENGINE=Myisam;
SET @@global.debug_dbug='+d,skip_commit_ordered';
INSERT INTO t1 VALUES (0, REPEAT("x", 4100));
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con1_ready WAIT_FOR _ever";
INSERT INTO t1 VALUES (1, REPEAT("x", 4100));
SET DEBUG_SYNC= "now WAIT_FOR con1_ready";
INSERT INTO t2 VALUES (1, "force binlog rotation");
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con2_ready WAIT_FOR _ever";
INSERT INTO t1 VALUES (2, NULL);
SET DEBUG_SYNC= "now WAIT_FOR con2_ready";
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con3_ready WAIT_FOR _ever";
INSERT INTO t1 VALUES (3, REPEAT("x", 4100));
SET DEBUG_SYNC= "now WAIT_FOR con3_ready";
INSERT INTO t2 VALUES (2, "force binlog rotation");
FLUSH TABLES t2;
show binary logs;
Log_name	File_size
master-bin.000001	#
master-bin.000002	#
master-bin.000003	#
master-bin.000004	#
show binlog events in 'master-bin.000001' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000001	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000001	#	Binlog_checkpoint	#	#	master-bin.000001
master-bin.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (a INT PRIMARY KEY, b MEDIUMTEXT) ENGINE=Innodb
master-bin.000001	#	Query	#	#	use `test`; CREATE TABLE t2 (a INT PRIMARY KEY, b MEDIUMTEXT) ENGINE=Myisam
master-bin.000001	#	Query	#	#	BEGIN
master-bin.000001	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000001	#	Xid	#	#	COMMIT /* XID */
master-bin.000001	#	Rotate	#	#	master-bin.000002;pos=<binlog_start>
show binlog events in 'master-bin.000002' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000002	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000002	#	Binlog_checkpoint	#	#	master-bin.000002
master-bin.000002	#	Query	#	#	BEGIN
master-bin.000002	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000002	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000002	#	Xid	#	#	COMMIT /* XID */
master-bin.000002	#	Query	#	#	BEGIN
master-bin.000002	#	Table_map	#	#	table_id: # (test.t2)
master-bin.000002	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Rotate	#	#	master-bin.000003;pos=<binlog_start>
show binlog events in 'master-bin.000003' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000003	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000002
master-bin.000003	#	Query	#	#	BEGIN
master-bin.000003	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000003	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000003	#	Xid	#	#	COMMIT /* XID */
master-bin.000003	#	Query	#	#	BEGIN
master-bin.000003	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000003	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000003	#	Xid	#	#	COMMIT /* XID */
master-bin.000003	#	Query	#	#	BEGIN
master-bin.000003	#	Table_map	#	#	table_id: # (test.t2)
master-bin.000003	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000003	#	Query	#	#	COMMIT
master-bin.000003	#	Rotate	#	#	master-bin.00000<binlog_start>;pos=<binlog_start>
show binlog events in 'master-bin.00000<binlog_start>' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.00000<binlog_start>	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.00000<binlog_start>	#	Binlog_checkpoint	#	#	master-bin.000002
master-bin.00000<binlog_start>	#	Query	#	#	use `test`; FLUSH TABLES t2
We should see only one entry here, a=0:
SELECT a FROM t1 ORDER BY a;
a
0
PURGE BINARY LOGS TO "master-bin.000004";
show binary logs;
Log_name	File_size
master-bin.000002	#
master-bin.000003	#
master-bin.000004	#
SET SESSION debug_dbug="+d,crash_commit_after_log";
INSERT INTO t1 VALUES (4, NULL);
Got one of the listed errors
SELECT a FROM t1 ORDER BY a;
a
0
1
2
3
4
*** Test that RESET MASTER waits for pending XIDs to be unlogged.
SET @old_max_binlog_size= @@global.max_binlog_size;
SET GLOBAL max_binlog_size= 4096;
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con10_ready WAIT_FOR con10_go";
INSERT INTO t1 VALUES (10, NULL);
SET DEBUG_SYNC= "now WAIT_FOR con10_ready";
INSERT INTO t2 VALUES (10, REPEAT("x", 4100));
INSERT INTO t2 VALUES (11, REPEAT("x", 4100));
show binary logs;
Log_name	File_size
master-bin.000002	#
master-bin.000003	#
master-bin.000004	#
master-bin.000005	#
master-bin.000006	#
master-bin.000007	#
SET DEBUG_SYNC= "execute_command_after_close_tables SIGNAL reset_master_done";
RESET MASTER;
This will timeout, as RESET MASTER is blocked
SET DEBUG_SYNC= "now WAIT_FOR reset_master_done TIMEOUT 1";
Warnings:
Warning	1639	debug sync point wait timed out
SET DEBUG_SYNC= "now SIGNAL con10_go";
show binary logs;
Log_name	File_size
master-bin.000001	#
*** Test that binlog N is active, and last pending trx in (N-1) is
unlogged while there is still a pending trx in (N-2).
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con10_ready WAIT_FOR con10_continue";
INSERT INTO t1 VALUES (20, REPEAT("x", 4100));
SET DEBUG_SYNC= "now WAIT_FOR con10_ready";
INSERT INTO t2 VALUES (3, "force binlog rotation");
SET DEBUG_SYNC= "ha_commit_trans_after_log_and_order SIGNAL con11_ready WAIT_FOR con11_continue";
INSERT INTO t1 VALUES (21, REPEAT("x", 4100));
SET DEBUG_SYNC= "now WAIT_FOR con11_ready";
INSERT INTO t2 VALUES (4, "force binlog rotation");
show binary logs;
Log_name	File_size
master-bin.000001	#
master-bin.000002	#
master-bin.000003	#
show binlog events in 'master-bin.000001' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000001	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000001	#	Binlog_checkpoint	#	#	master-bin.000001
master-bin.000001	#	Query	#	#	BEGIN
master-bin.000001	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000001	#	Xid	#	#	COMMIT /* XID */
master-bin.000001	#	Query	#	#	BEGIN
master-bin.000001	#	Table_map	#	#	table_id: # (test.t2)
master-bin.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Rotate	#	#	master-bin.000002;pos=<binlog_start>
show binlog events in 'master-bin.000002' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000002	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000002	#	Binlog_checkpoint	#	#	master-bin.000001
master-bin.000002	#	Query	#	#	BEGIN
master-bin.000002	#	Table_map	#	#	table_id: # (test.t1)
master-bin.000002	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000002	#	Xid	#	#	COMMIT /* XID */
master-bin.000002	#	Query	#	#	BEGIN
master-bin.000002	#	Table_map	#	#	table_id: # (test.t2)
master-bin.000002	#	Write_rows	#	#	table_id: # flags: STMT_END_F
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Rotate	#	#	master-bin.000003;pos=<binlog_start>
show binlog events in 'master-bin.000003' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000003	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000001
SET DEBUG_SYNC= "now SIGNAL con11_continue";
con10 is still pending, no new binlog checkpoint should have been logged.
show binlog events in 'master-bin.000003' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000003	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000001
SET DEBUG_SYNC= "now SIGNAL con10_continue";
No XIDs are pending, a new binlog checkpoint should have been logged.
show binlog events in 'master-bin.000003' from <binlog_start>;
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000003	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000001
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000003
DROP TABLE t1, t2;
SET GLOBAL max_binlog_size= @old_max_binlog_size;
